; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optspeed -noreduceopt -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\MAIN.C"
	.assume ADL=1
	SEGMENT DATA
_cx:
	DF	0.0
_cy:
	DF	0.0
_colors:
	DB	224
	DB	227
	DB	231
	DB	3
	DB	16
	DB	80
	DB	240
	DB	255
	DB	0
	DB	47
_c1index:
	DW	0
	DB	0
_c2index:
	DW	1
	DB	0
	SEGMENT BSS
_c1:
	DS	1
_c2:
	DS	1
	SEGMENT DATA
_Iter:
	DW	12
	DB	0
	SEGMENT BSS
_iter_buf:
	DS	20
;    1	/*
;    2	 *--------------------------------------
;    3	 * Program Name:
;    4	 * Author:
;    5	 * License:
;    6	 * Description:
;    7	 *--------------------------------------
;    8	*/
;    9	
;   10	/* Keep these headers */
;   11	#include <stdbool.h>
;   12	#include <stddef.h>
;   13	#include <stdint.h>
;   14	#include <tice.h>
;   15	
;   16	/* Standard headers (recommended) */
;   17	#include <math.h>
;   18	#include <stdio.h>
;   19	#include <stdlib.h>
;   20	#include <string.h>
;   21	
;   22	#include <graphx.h>
;   23	#include <keypadc.h>
;   24	
;   25	/* Put your function prototypes here */
;   26	int juliaPixel(float x, float y, int i, float cx, float cy);
;   27	int render_rough(double cx, double cy, uint8_t c1, uint8_t c2, int Iter);
;   28	int render_full(double cx, double cy, uint8_t c1, uint8_t c2, int Iter);
;   29	int start_screen();
;   30	int menu_keys();
;   31	void draw_menu();
;   32	void draw_preview(uint8_t c1, uint8_t c2, int Iter);
;   33	void wait(uint16_t ms);
;   34	void draw_color_preview();
;   35	void draw_crosshair();
;   36	void draw_iter();
;   37	char* reverse(char *s);
;   38	char* itoa(int num, char* str, int base);
;   39	/* Put all your globals here */
;   40	
;   41	#define INCREMENT 0.1
;   42	
;   43	//C value
;   44	double cx = 0.0;
;   45	double cy = 0.0;
;   46	
;   47	//Colors
;   48	#define NUM_COLORS 10
;   49	uint8_t colors[NUM_COLORS] = {gfx_red, gfx_orange, gfx_yellow, gfx_green, gfx_blue, gfx_purple, gfx_pink, gfx_white, gfx_black, 0x2f};
;   50	
;   51	//Index in colors
;   52	int c1index = 0;
;   53	int c2index = 1;
;   54	
;   55	//Forground and background colors
;   56	uint8_t c1;
;   57	uint8_t c2;
;   58	
;   59	//How far to render
;   60	#define xLim 160
;   61	#define yLim 240
;   62	
;   63	#define ROUGH_ITER 7
;   64	#define PREVIEW_ITER 5
;   65	//Full Rendering Iterations - setable by user
;   66	int Iter = 12;
;   67	
;   68	char iter_buf[20];
	SEGMENT CODE
;   69	
;   70	void main(void) {
_main:
;   71	    /* Fill in the body of the main function here */
;   72	    //Init colors
;   73	    c1 = colors[c1index];
	LD	BC,_colors
	LD	HL,(_c1index)
	ADD	HL,BC
	LD	A,(HL)
	LD	(_c1),A
;   74	    c2 = colors[c2index];
;   75	    //Draw the startup screen
;   76	    gfx_Begin(gfx_8bpp);
	LD	BC,39
	PUSH	BC
	LD	HL,(_c2index)
	LD	BC,_colors
	ADD	HL,BC
	LD	A,(HL)
	LD	(_c2),A
	CALL	_gfx_Begin
	POP	BC
;   77	    if(start_screen()){return;};
	CALL	_start_screen
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_9
;   78	    //Do a rough outline
;   79	    if(render_rough(cx, cy, c1, c2, ROUGH_ITER)){return;};
	LD	A,(_c2)
	LD	C,A
	LD	A,(_c1)
	LD	DE,7
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	LD	A,(_cy+3)
	PUSH	BC
	LD	C,A
	PUSH	BC
	LD	A,(_cx+3)
	LD	C,A
	LD	DE,(_cy)
	PUSH	DE
	PUSH	BC
	LD	BC,(_cx)
	PUSH	BC
	CALL	_render_rough
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_9
;   80	    //Full render
;   81	    if(render_full(cx, cy, c2, c1, Iter)){return;};
	LD	A,(_c1)
	LD	C,A
	LD	A,(_c2)
	LD	DE,(_Iter)
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	LD	A,(_cy+3)
	PUSH	BC
	LD	C,A
	PUSH	BC
	LD	A,(_cx+3)
	LD	C,A
	LD	DE,(_cy)
	PUSH	DE
	PUSH	BC
	LD	BC,(_cx)
	PUSH	BC
	CALL	_render_full
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_9
;   82	    //Wait for keypress to exit
;   83	    while (!os_GetCSC());
L_7:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_7
;   84	    gfx_End();
	CALL	_gfx_End
;   85	}
L_9:
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_Iter                               STATIC      3   variable
;_render_full                        IMPORT  -----   function
;_cx                                 STATIC      4   variable
;_cy                                 STATIC      4   variable
;_render_rough                       IMPORT  -----   function
;_start_screen                       IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_c2                                 STATIC      1   variable
;_c2index                            STATIC      3   variable
;_c1                                 STATIC      1   variable
;_c1index                            STATIC      3   variable
;_colors                             STATIC     10   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   86	
;   87	/* Put other functions here */
;   88	
;   89	int start_screen(){
_start_screen:
;   90	  //Draw Menu
;   91	  draw_menu();
	CALL	_draw_menu
;   92	  //Draw Preview in top left
;   93	  draw_preview(c1, c2, PREVIEW_ITER);
	LD	A,(_c2)
	LD	C,A
	LD	A,(_c1)
	LD	DE,5
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_draw_preview
	POP	BC
	POP	BC
	POP	BC
;   94	  //Handle keys - waits for key right now
;   95	  if(menu_keys()){return 1;};
	CALL	_menu_keys
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	Z,L_11
	LD	HL,1
	JR	L_12
L_11:
	OR	A,A
;   96	  return 0;
	SBC	HL,HL
;   97	}
L_12:
	RET	


;**************************** _start_screen ***************************
;Name                         Addr/Register   Size   Type
;_menu_keys                          IMPORT  -----   function
;_c1                                 STATIC      1   variable
;_c2                                 STATIC      1   variable
;_draw_preview                       IMPORT  -----   function
;_draw_menu                          IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   98	
;   99	int menu_keys(){
_menu_keys:
;  100	  while(true){
L_55:
;  101	    kb_Scan();
	CALL	_kb_Scan
;  102	    //Check for 2nd to redraw preview
;  103	    if(kb_Data[1] & kb_2nd){
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_15
;  104	      draw_preview(c1, c2, PREVIEW_ITER);
	LD	A,(_c2)
	LD	C,A
	LD	A,(_c1)
	LD	DE,5
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_draw_preview
	POP	BC
	POP	BC
	POP	BC
;  105	    }
L_15:
;  106	    //Check for enter to start rendering
;  107	    if(kb_Data[6] & kb_Enter){wait(400);return 0;}
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_18
	LD	BC,400
	PUSH	BC
	CALL	_wait
	POP	BC
	OR	A,A
	SBC	HL,HL
	JR	L_57
L_18:
;  108	    //Change colors
;  109	    if(kb_Data[4] & kb_LParen){
	LD	A,(16056344)
	AND	A,16
	JR	Z,L_19
;  110	      c1index++;
	LD	BC,(_c1index)
	INC	BC
	LD	(_c1index),BC
;  111	      c1index %= NUM_COLORS;
	LD	HL,(_c1index)
	LD	BC,10
	CALL	__irems
	LD	(_c1index),HL
;  112	      c1 = colors[c1index];
	LD	BC,_colors
;  113	      wait(300);
	LD	DE,300
	PUSH	DE
	ADD	HL,BC
	LD	A,(HL)
	LD	(_c1),A
	CALL	_wait
	POP	BC
;  114	      draw_color_preview();
	CALL	_draw_color_preview
;  115	    };
L_19:
;  116	    if(kb_Data[5] & kb_RParen){
	LD	A,(16056346)
	AND	A,16
	JR	Z,L_22
;  117	      c2index++;
	LD	BC,(_c2index)
	INC	BC
	LD	(_c2index),BC
;  118	      c2index %= NUM_COLORS;
	LD	HL,(_c2index)
	LD	BC,10
	CALL	__irems
	LD	(_c2index),HL
;  119	      c2 = colors[c2index];
	LD	BC,_colors
	ADD	HL,BC
	LD	A,(HL)
	LD	(_c2),A
;  120	      draw_color_preview();
	CALL	_draw_color_preview
;  121	      wait(300);
	LD	BC,300
	PUSH	BC
	CALL	_wait
	POP	BC
;  122	    };
L_22:
;  123	    //Detect Arrows and adjust cx and cy
;  124	    if(kb_Data[7] & kb_Down){
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_25
;  125	      cy += INCREMENT;
	LD	HL,13421773
	LD	E,61
	LD	BC,(_cy)
	LD	A,(_cy+3)
	CALL	__fadd
	LD	(_cy),BC
	LD	(_cy+3),A
;  126	      draw_crosshair();
	CALL	_draw_crosshair
;  127	      wait(200);
	LD	BC,200
	PUSH	BC
	CALL	_wait
	POP	BC
;  128	    }
L_25:
;  129	    if(kb_Data[7] & kb_Up){
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_27
;  130	      cy -= INCREMENT;
	LD	HL,13421773
	LD	E,61
	LD	BC,(_cy)
	LD	A,(_cy+3)
	CALL	__fsub
	LD	(_cy),BC
	LD	(_cy+3),A
;  131	      draw_crosshair();
	CALL	_draw_crosshair
;  132	      wait(200);
	LD	BC,200
	PUSH	BC
	CALL	_wait
	POP	BC
;  133	    }
L_27:
;  134	    if(kb_Data[7] & kb_Left){
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_29
;  135	      cx -= INCREMENT;
	LD	HL,13421773
	LD	E,61
	LD	BC,(_cx)
	LD	A,(_cx+3)
	CALL	__fsub
	LD	(_cx),BC
	LD	(_cx+3),A
;  136	      draw_crosshair();
	CALL	_draw_crosshair
;  137	      wait(200);
	LD	BC,200
	PUSH	BC
	CALL	_wait
	POP	BC
;  138	    }
L_29:
;  139	    if(kb_Data[7] & kb_Right){
	LD	A,(16056350)
	AND	A,4
	JR	Z,L_31
;  140	      cx += INCREMENT;
	LD	HL,13421773
	LD	E,61
	LD	BC,(_cx)
	LD	A,(_cx+3)
	CALL	__fadd
	LD	(_cx),BC
	LD	(_cx+3),A
;  141	      draw_crosshair();
	CALL	_draw_crosshair
;  142	      wait(200);
	LD	BC,200
	PUSH	BC
	CALL	_wait
	POP	BC
;  143	    }
L_31:
;  144	    //Iterations adjustments
;  145	    if(kb_Data[6] & kb_Add){
	LD	A,(16056348)
	AND	A,2
	JR	Z,L_33
;  146	      Iter += 1;
	LD	BC,(_Iter)
	INC	BC
	LD	(_Iter),BC
;  147	      draw_iter();
	CALL	_draw_iter
;  148	      wait(200);
	LD	BC,200
	PUSH	BC
	CALL	_wait
	POP	BC
;  149	    }
L_33:
;  150	    if(kb_Data[6] & kb_Sub){
	LD	A,(16056348)
	AND	A,4
	JR	Z,L_35
;  151	      Iter -= 1;
	LD	BC,(_Iter)
	DEC	BC
	LD	(_Iter),BC
;  152	      draw_iter();
	CALL	_draw_iter
;  153	      wait(200);
	LD	BC,200
	PUSH	BC
	CALL	_wait
	POP	BC
;  154	    }
L_35:
;  155	    //Presets
;  156	    if(kb_Data[3] & kb_1){
	LD	A,(16056342)
	AND	A,2
	JR	Z,L_37
;  157	      cx = 0.26;
	LD	BC,8724152
	LD	(_cx),BC
	LD	A,62
	LD	(_cx+3),A
;  158	      cy = 0.54;
	LD	BC,671089
	LD	(_cy),BC
	LD	A,63
	LD	(_cy+3),A
;  159	      draw_preview(c1, c2, PREVIEW_ITER);
	LD	A,(_c2)
	LD	C,A
	LD	A,(_c1)
	LD	DE,5
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_draw_preview
	POP	BC
	POP	BC
	POP	BC
;  160	    }
L_37:
;  161	    if(kb_Data[4] & kb_2){
	LD	A,(16056344)
	AND	A,2
	JR	Z,L_39
;  162	      cx = -1.135;
	LD	BC,9521070
	LD	(_cx),BC
	LD	A,191
	LD	(_cx+3),A
;  163	      cy = 0.2475;
	LD	BC,8220836
	LD	(_cy),BC
	LD	A,62
	LD	(_cy+3),A
;  164	      draw_preview(c1, c2, PREVIEW_ITER);
	LD	A,(_c2)
	LD	C,A
	LD	A,(_c1)
	LD	DE,5
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_draw_preview
	POP	BC
	POP	BC
	POP	BC
;  165	    }
L_39:
;  166	    if(kb_Data[5] & kb_3){
	LD	A,(16056346)
	AND	A,2
	JR	Z,L_41
;  167	      cx = 0.3;
	LD	BC,10066330
	LD	(_cx),BC
	LD	A,62
	LD	(_cx+3),A
;  168	      cy = -0.01;
	LD	BC,2348810
	LD	(_cy),BC
	LD	A,188
	LD	(_cy+3),A
;  169	      draw_preview(c1, c2, PREVIEW_ITER);
	LD	A,(_c2)
	LD	C,A
	LD	A,(_c1)
	LD	DE,5
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_draw_preview
	POP	BC
	POP	BC
	POP	BC
;  170	    }
L_41:
;  171	    if(kb_Data[3] & kb_4){
	LD	A,(16056342)
	AND	A,4
	JR	Z,L_43
;  172	      cx = -1.476;
	LD	BC,12381585
	LD	(_cx),BC
	LD	A,191
	LD	(_cx+3),A
;  173	      cy = 0;
	LD	BC,0
	LD	(_cy),BC
	XOR	A,A
	LD	(_cy+3),A
;  174	      draw_preview(c1, c2, PREVIEW_ITER);
	LD	A,(_c2)
	LD	C,A
	LD	A,(_c1)
	LD	DE,5
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_draw_preview
	POP	BC
	POP	BC
	POP	BC
;  175	    }
L_43:
;  176	    if(kb_Data[4] & kb_5){
	LD	A,(16056344)
	AND	A,4
	JR	Z,L_45
;  177	      cx = 0.28;
	LD	BC,9395241
	LD	(_cx),BC
	LD	A,62
	LD	(_cx+3),A
;  178	      cy = 0.008;
	LD	BC,201327
	LD	(_cy),BC
	LD	A,60
	LD	(_cy+3),A
;  179	      draw_preview(c1, c2, PREVIEW_ITER);
	LD	A,(_c2)
	LD	C,A
	LD	A,(_c1)
	LD	DE,5
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_draw_preview
	POP	BC
	POP	BC
	POP	BC
;  180	    }
L_45:
;  181	    if(kb_Data[5] & kb_6){
	LD	A,(16056346)
	AND	A,4
	JR	Z,L_47
;  182	      cx = -0.79;
	LD	BC,4865393
	LD	(_cx),BC
	LD	A,191
	LD	(_cx+3),A
;  183	      cy = 0.15;
	LD	BC,1677722
	LD	(_cy),BC
	LD	A,62
	LD	(_cy+3),A
;  184	      draw_preview(c1, c2, PREVIEW_ITER);
	LD	A,(_c2)
	LD	C,A
	LD	A,(_c1)
	LD	DE,5
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_draw_preview
	POP	BC
	POP	BC
	POP	BC
;  185	    }
L_47:
;  186	    if(kb_Data[3] & kb_7){
	LD	A,(16056342)
	AND	A,8
	JR	Z,L_49
;  187	      cx = -0.12;
	LD	BC,16106127
	LD	(_cx),BC
	LD	A,189
	LD	(_cx+3),A
;  188	      cy = 0.77;
	LD	BC,4529848
	LD	(_cy),BC
	LD	A,63
	LD	(_cy+3),A
;  189	      draw_preview(c1, c2, PREVIEW_ITER);
	LD	A,(_c2)
	LD	C,A
	LD	A,(_c1)
	LD	DE,5
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_draw_preview
	POP	BC
	POP	BC
	POP	BC
;  190	    }
L_49:
;  191	    if(kb_Data[4] & kb_8){
	LD	A,(16056344)
	AND	A,8
	JR	Z,L_51
;  192	      cx = -0.0519;
	LD	BC,5543192
	LD	(_cx),BC
	LD	A,189
	LD	(_cx+3),A
;  193	      cy = 0.688;
	LD	BC,3154117
	LD	(_cy),BC
	LD	A,63
	LD	(_cy+3),A
;  194	      draw_preview(c1, c2, PREVIEW_ITER);
	LD	A,(_c2)
	LD	C,A
	LD	A,(_c1)
	LD	DE,5
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_draw_preview
	POP	BC
	POP	BC
	POP	BC
;  195	    }
L_51:
;  196	    if(kb_Data[5] & kb_9){
	LD	A,(16056346)
	AND	A,8
	JR	Z,L_53
;  197	      cx = 0;
	LD	BC,0
	LD	(_cx),BC
	XOR	A,A
	LD	(_cx+3),A
;  198	      cy = 0.75;
	LD	BC,4194304
	LD	(_cy),BC
	LD	A,63
	LD	(_cy+3),A
;  199	      draw_preview(c1, c2, PREVIEW_ITER);
	LD	A,(_c2)
	LD	C,A
	LD	A,(_c1)
	LD	DE,5
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_draw_preview
	POP	BC
	POP	BC
	POP	BC
;  200	    }
L_53:
;  201	    if(kb_Data[3] & kb_0){
	LD	A,(16056342)
	AND	A,1
	JR	Z,L_55
;  202	      cx = -0.1;
	LD	BC,13421773
	LD	(_cx),BC
	LD	A,189
	LD	(_cx+3),A
;  203	      cy = 0.66;
	LD	BC,2684355
	LD	(_cy),BC
	LD	A,63
	LD	(_cy+3),A
;  204	      draw_preview(c1, c2, PREVIEW_ITER);
	LD	A,(_c2)
	LD	C,A
	LD	A,(_c1)
	LD	DE,5
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_draw_preview
	POP	BC
	POP	BC
	POP	BC
	JR	L_55
;  205	    }
;  206	
;  207	  }
;  208	  return 0;
;  209	}
L_57:
	RET	


;**************************** _menu_keys ***************************
;Name                         Addr/Register   Size   Type
;_draw_iter                          IMPORT  -----   function
;_Iter                               STATIC      3   variable
;_cx                                 STATIC      4   variable
;_draw_crosshair                     IMPORT  -----   function
;_cy                                 STATIC      4   variable
;_c2index                            STATIC      3   variable
;_draw_color_preview                 IMPORT  -----   function
;_colors                             STATIC     10   variable
;_c1index                            STATIC      3   variable
;_wait                               IMPORT  -----   function
;_c1                                 STATIC      1   variable
;_c2                                 STATIC      1   variable
;_draw_preview                       IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  210	
;  211	void draw_menu(){
_draw_menu:
;  212	  gfx_FillScreen(gfx_white);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  213	  //Mockup preview square
;  214	  gfx_SetColor(gfx_black);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  215	  gfx_FillRectangle(5, 15, 54, 40);
	LD	BC,40
	PUSH	BC
	LD	BC,54
	PUSH	BC
	LD	BC,15
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  216	  //Preview label
;  217	  gfx_SetTextScale(1,1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  218	  gfx_SetTextFGColor(gfx_black);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  219	  gfx_PrintStringXY("Preview", 5, 5);
	LD	BC,5
	PUSH	BC
	PUSH	BC
	LD	BC,L__28
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  220	  gfx_PrintStringXY("Color 1", 5, 65);
	LD	BC,65
	PUSH	BC
	LD	BC,5
	PUSH	BC
	LD	BC,L__29
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  221	  gfx_PrintStringXY("Color 2", 5, 90);
	LD	BC,90
	PUSH	BC
	LD	BC,5
	PUSH	BC
	LD	BC,L__30
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  222	  //Color preview mockup boxes
;  223	  gfx_SetColor(gfx_black);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  224	  gfx_FillRectangle(5, 75, 54, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,54
	PUSH	BC
	LD	BC,75
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  225	  gfx_FillRectangle(5, 100, 54, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,54
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  226	  //Title
;  227	  gfx_SetTextFGColor(gfx_orange);
	LD	BC,227
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  228	  gfx_SetTextScale(5, 5);
	LD	BC,5
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  229	  gfx_PrintStringXY("Julia", 100, 20);
	LD	BC,20
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,L__31
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  230	  //Description
;  231	  gfx_SetTextFGColor(gfx_green);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  232	  gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  233	  gfx_PrintStringXY("A Julia Set Viewer For the TI-84+CE", 75, 60);
	LD	BC,60
	PUSH	BC
	LD	BC,75
	PUSH	BC
	LD	BC,L__32
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  234	  //Author
;  235	  gfx_SetTextFGColor(gfx_orange);
	LD	BC,227
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  236	  gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  237	  gfx_PrintStringXY("By Edward Wawrzynek", 170, 70);
	LD	BC,70
	PUSH	BC
	LD	BC,170
	PUSH	BC
	LD	BC,L__33
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  238	  //Controls Header
;  239	  gfx_SetTextFGColor(gfx_black);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  240	  gfx_SetTextScale(2,2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  241	  gfx_PrintStringXY("Controls", 120,85);
	LD	BC,85
	PUSH	BC
	LD	BC,120
	PUSH	BC
	LD	BC,L__34
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  242	  //Control Text
;  243	  gfx_SetTextScale(1,1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  244	  gfx_PrintStringXY("A Julia set starts with a complex nu-", 67, 105);
	LD	BC,105
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__35
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  245	  gfx_PrintStringXY("mber C, which is represented by the  ", 67, 115);
	LD	BC,115
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__36
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  246	  gfx_PrintStringXY("crosshair in the preview. Use the ar-", 67, 125);
	LD	BC,125
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__37
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  247	  gfx_PrintStringXY("row keys to change it and get differ-", 67, 135);
	LD	BC,135
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__38
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  248	  gfx_PrintStringXY("ent fractals. Use the + and - keys to", 67, 145);
	LD	BC,145
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__39
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  249	  gfx_PrintStringXY("change the number of iterations and ", 67, 155);
	LD	BC,155
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__40
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  250	  gfx_PrintStringXY("detail level. Use the ( and ) keys to", 67, 165);
	LD	BC,165
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__41
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  251	  gfx_PrintStringXY("cycle through the background and f-", 67, 175);
	LD	BC,175
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__42
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  252	  gfx_PrintStringXY("oreground colors, respectively. Pre-", 67, 185);
	LD	BC,185
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__43
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  253	  gfx_PrintStringXY("ss enter to begin rendering, and pr-", 67, 195);
	LD	BC,195
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__44
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  254	  gfx_PrintStringXY("ess any key during rendering to exit.", 67, 205);
	LD	BC,205
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__45
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  255	  gfx_PrintStringXY("Press 2nd to update the preview, and ", 67, 215);
	LD	BC,215
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__46
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  256	  gfx_PrintStringXY("use the 0-9 keys to select a preset C.", 67, 225);
	LD	BC,225
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__47
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  257	  //Preset Text in control column for completness
;  258	  gfx_PrintStringXY("Presets", 5, 140);
	LD	BC,140
	PUSH	BC
	LD	BC,5
	PUSH	BC
	LD	BC,L__48
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  259	  gfx_PrintStringXY("Keys 0-9", 5, 150);
	LD	BC,150
	PUSH	BC
	LD	BC,5
	PUSH	BC
	LD	BC,L__49
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  260	}
	RET	


;**************************** _draw_menu ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__28:
	DB	"Preview"
	DB	0
L__29:
	DB	"Color 1"
	DB	0
L__30:
	DB	"Color 2"
	DB	0
L__31:
	DB	"Julia"
	DB	0
L__32:
	DB	"A Julia Set Viewer For the TI-84+CE"
	DB	0
L__33:
	DB	"By Edward Wawrzynek"
	DB	0
L__34:
	DB	"Controls"
	DB	0
L__35:
	DB	"A Julia set starts with a complex nu-"
	DB	0
L__36:
	DB	"mber C, which is represented by the  "
	DB	0
L__37:
	DB	"crosshair in the preview. Use the ar-"
	DB	0
L__38:
	DB	"row keys to change it and get differ-"
	DB	0
L__39:
	DB	"ent fractals. Use the + and - keys to"
	DB	0
L__40:
	DB	"change the number of iterations and "
	DB	0
L__41:
	DB	"detail level. Use the ( and ) keys to"
	DB	0
L__42:
	DB	"cycle through the background and f-"
	DB	0
L__43:
	DB	"oreground colors, respectively. Pre-"
	DB	0
L__44:
	DB	"ss enter to begin rendering, and pr-"
	DB	0
L__45:
	DB	"ess any key during rendering to exit."
	DB	0
L__46:
	DB	"Press 2nd to update the preview, and "
	DB	0
L__47:
	DB	"use the 0-9 keys to select a preset C."
	DB	0
L__48:
	DB	"Presets"
	DB	0
L__49:
	DB	"Keys 0-9"
	DB	0
	SEGMENT CODE
;  261	
;  262	void draw_iter(){
_draw_iter:
;  263	  //Clear Area
;  264	  gfx_SetColor(gfx_white);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  265	  gfx_FillRectangle(5, 110, 54, 25);
	LD	BC,25
	PUSH	BC
	LD	BC,54
	PUSH	BC
	LD	BC,110
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  266	  gfx_SetTextFGColor(gfx_black);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  267	  gfx_SetTextScale(1,1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  268	  gfx_PrintStringXY("Iters:", 5, 115);
	LD	BC,115
	PUSH	BC
	LD	BC,5
	PUSH	BC
	LD	BC,L__51
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  269	  itoa(Iter, iter_buf,10);
	LD	BC,10
	PUSH	BC
	LD	BC,_iter_buf
	PUSH	BC
	LD	BC,(_Iter)
	PUSH	BC
	CALL	_itoa
	POP	BC
	POP	BC
	POP	BC
;  270	  gfx_PrintStringXY(iter_buf, 5, 125);
	LD	BC,125
	PUSH	BC
	LD	BC,5
	PUSH	BC
	LD	BC,_iter_buf
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  271	}
	RET	


;**************************** _draw_iter ***************************
;Name                         Addr/Register   Size   Type
;_Iter                               STATIC      3   variable
;_iter_buf                           STATIC     20   variable
;_itoa                               IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__51:
	DB	"Iters:"
	DB	0
	SEGMENT CODE
;  272	
;  273	void draw_color_preview(){
_draw_color_preview:
;  274	  //Draw Color previews boxes
;  275	  gfx_SetColor(c1);
	LD	A,(_c1)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  276	  gfx_FillRectangle(5, 75, 54, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,54
	PUSH	BC
	LD	BC,75
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  277	  gfx_SetColor(c2);
	LD	A,(_c2)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  278	  gfx_FillRectangle(5, 100, 54, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,54
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  279	}
	RET	


;**************************** _draw_color_preview ***************************
;Name                         Addr/Register   Size   Type
;_c2                                 STATIC      1   variable
;_gfx_FillRectangle                  IMPORT  -----   function
;_c1                                 STATIC      1   variable
;_gfx_SetColor                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  280	
;  281	void draw_crosshair(){
_draw_crosshair:
	LD	HL,-4
	CALL	__frameset
;  282	  uint16_t x;
;  283	  uint16_t y;
;  284	  x = (uint16_t)(cx*13.5) + 32;
	LD	HL,5767168
	LD	E,65
	LD	BC,(_cx)
	LD	A,(_cx+3)
	CALL	__fmul
	CALL	__ftol
	LD	IY,BC
	LEA	HL,IY+32
	LD	(IX+-2),L
	LD	(IX+-1),H
;  285	  y = (uint16_t)(cy*6.66) + 35;
	LD	HL,13967032
	LD	BC,(_cy)
	LD	A,(_cy+3)
	LD	E,64
	CALL	__fmul
	CALL	__ftol
	LD	IY,BC
	LEA	HL,IY+35
	LD	(IX+-4),L
	LD	(IX+-3),H
;  286	  //Draw
;  287	  gfx_SetColor(gfx_black);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  288	  gfx_HorizLine(x-3, y, 7);
	LD	BC,7
	PUSH	BC
	LD	BC,(IX+-4)
	CALL	__stoiu
	PUSH	HL
	LD	BC,(IX+-2)
	CALL	__stoiu
	DEC	HL
	DEC	HL
	DEC	HL
	PUSH	HL
	CALL	_gfx_HorizLine
	POP	BC
	POP	BC
	POP	BC
;  289	  gfx_VertLine(x,y-3,7);
	LD	BC,7
	PUSH	BC
	LD	BC,(IX+-4)
	CALL	__stoiu
	DEC	HL
	DEC	HL
	DEC	HL
	PUSH	HL
	LD	BC,(IX+-2)
	CALL	__stoiu
	PUSH	HL
	CALL	_gfx_VertLine
	POP	BC
	POP	BC
	POP	BC
;  290	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _draw_crosshair ***************************
;Name                         Addr/Register   Size   Type
;_gfx_VertLine                       IMPORT  -----   function
;_gfx_HorizLine                      IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_cy                                 STATIC      4   variable
;_cx                                 STATIC      4   variable
;y                                     IX-4      2   variable
;x                                     IX-2      2   variable


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


;  291	
;  292	void draw_preview(uint8_t c1, uint8_t c2, int Iter){
_draw_preview:
	LD	HL,-11
	CALL	__frameset
;  293	  uint16_t x;
;  294	  uint8_t y;
;  295	  double zx;
;  296	  double zy;
;  297	  draw_color_preview();
	CALL	_draw_color_preview
;  298	  draw_iter();
	CALL	_draw_iter
;  299	  //6 x 6 blocks - resolution 54 x 40 pixels
;  300	  for(x = 0; x < 27; x++){
	LD	(IX+-3),0
	LD	(IX+-2),0
	JR	L_72
L_70:
;  301	    for(y = 0; y < 40; y++){
	LD	(IX+-1),0
	JR	L_69
L_67:
;  302	      zx = (((double)x)*0.074)-2.0;
	LD	BC,(IX+-3)
	CALL	__stoiu
	LD	BC,HL
	XOR	A,A
	CALL	__ultof
	LD	HL,9932112
	LD	E,61
	CALL	__fmul
	OR	A,A
	SBC	HL,HL
	LD	E,64
	CALL	__fsub
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  303	      zy = (((double)y)*0.075)-1.5;
	UEXT	HL
	LD	L,(IX+-1)
	LD	A,H
	LD	BC,HL
	CALL	__ultof
	LD	HL,10066330
	LD	E,61
	CALL	__fmul
	LD	HL,12582912
	LD	E,63
	CALL	__fsub
	LD	(IX+-11),BC
	LD	(IX+-8),A
;  304	      if(juliaPixel(zx, zy, Iter, cx, cy) == 1){
	LD	A,(_cy+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	A,(_cx+3)
	LD	C,A
	LD	DE,(_cy)
	PUSH	DE
	PUSH	BC
	LD	BC,(_cx)
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+-8)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-11)
	PUSH	BC
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	CALL	_juliaPixel
	LD	IY,27
	ADD	IY,SP
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	LD	SP,IY
	JR	NZ,L_65
;  305	        gfx_SetColor(c2);
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  306	      }
;  307	      else{
	JR	L_66
L_65:
;  308	        gfx_SetColor(c1);
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  309	      }
L_66:
;  310	      gfx_SetPixel(x+5, y+15);
	LD	A,(IX+-1)
	ADD	A,15
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	CALL	__stoiu
	LD	IY,HL
	LEA	BC,IY+5
	PUSH	BC
	CALL	_gfx_SetPixel
	POP	BC
	POP	BC
;  311	      gfx_SetPixel(58-x, 54-y);
	LD	A,54
	SUB	A,(IX+-1)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,58
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	CALL	_gfx_SetPixel
	POP	BC
	POP	BC
	INC	(IX+-1)
;  312	    }
L_69:
	LD	A,(IX+-1)
	CP	A,40
	JR	C,L_67
	LD	HL,(IX+-3)
	INC	HL
	LD	(IX+-3),L
	LD	(IX+-2),H
;  313	  }
L_72:
	LD.LIS	BC,27
	LD	HL,(IX+-3)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_70
;  314	  //Draw Small crosshair indicating where the c value is
;  315	  //Convert from floating c to real location
;  316	  draw_crosshair();
	CALL	_draw_crosshair
;  317	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _draw_preview ***************************
;Name                         Addr/Register   Size   Type
;_draw_crosshair                     IMPORT  -----   function
;_gfx_SetPixel                       IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_cx                                 STATIC      4   variable
;_cy                                 STATIC      4   variable
;_juliaPixel                         IMPORT  -----   function
;_draw_iter                          IMPORT  -----   function
;_draw_color_preview                 IMPORT  -----   function
;zy                                   IX-11      4   variable
;zx                                    IX-7      4   variable
;x                                     IX-3      2   variable
;y                                     IX-1      1   variable
;Iter                                 IX+12      3   parameter
;c2                                    IX+9      1   parameter
;c1                                    IX+6      1   parameter


; Stack Frame Size: 26 (bytes)
;       Spill Code: 0 (instruction)


;  318	
;  319	int juliaPixel(double x, double y, int i, double cx, double cy){
_juliaPixel:
	LD	HL,-15
	CALL	__frameset
;  320	  int n;
;  321	  double tempX;
;  322	  for(n = 0; n < i; n++){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_79
L_77:
;  323	    tempX = x;
	LD	BC,(IX+6)
	LD	A,(IX+9)
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  324	    x = (x*x)-(y*y) + cx;
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fmul
	LD	(IX+-10),BC
	LD	(IX+-11),A
	LD	A,(IX+15)
	LD	BC,(IX+12)
	LD	HL,(IX+12)
	LD	E,(IX+15)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	CALL	__fsub
	LD	HL,(IX+21)
	LD	E,(IX+24)
	CALL	__fadd
	LD	(IX+6),BC
	LD	(IX+9),A
;  325	    y = (2.0*tempX*y) + cy;
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	OR	A,A
	SBC	HL,HL
	LD	E,64
	CALL	__fmul
	LD	HL,(IX+12)
	LD	E,(IX+15)
	CALL	__fmul
	LD	HL,(IX+27)
	LD	E,(IX+30)
	CALL	__fadd
	LD	(IX+12),BC
	LD	(IX+15),A
;  326	    if((x*x) + (y*y) > 2.0){
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fmul
	LD	(IX+-14),BC
	LD	(IX+-15),A
	LD	A,(IX+15)
	LD	BC,(IX+12)
	LD	HL,(IX+12)
	LD	E,(IX+15)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-14)
	LD	A,(IX+-15)
	CALL	__fadd
	OR	A,A
	SBC	HL,HL
	LD	E,64
	CALL	__fcmp
	JP	P,L_78
	OR	A,A
;  327	      return 0;
	SBC	HL,HL
	JR	L_81
;  328	    }
;  329	  }
L_78:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_79:
	LD	BC,(IX+18)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_77
;  330	  return 1;
	LD	HL,1
;  331	}
L_81:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _juliaPixel ***************************
;Name                         Addr/Register   Size   Type
;tempX                                 IX-7      4   variable
;n                                     IX-3      3   variable
;cy                                   IX+27      4   parameter
;cx                                   IX+21      4   parameter
;i                                    IX+18      3   parameter
;y                                    IX+12      4   parameter
;x                                     IX+6      4   parameter


; Stack Frame Size: 48 (bytes)
;       Spill Code: 0 (instruction)


;  332	
;  333	int render_rough(double cx, double cy, uint8_t c1, uint8_t c2, int Iter){
_render_rough:
	LD	HL,-11
	CALL	__frameset
;  334	  //4 x 4 blocks
;  335	  uint16_t x;
;  336	  uint8_t y;
;  337	  //Z value
;  338	  double zx;
;  339	  double zy;
;  340	  for(x = 0; x < xLim; x+=4){
	LD	(IX+-3),0
	LD	(IX+-2),0
	JR	L_92
L_90:
;  341	    for(y = 0; y < yLim; y+=4){
	LD	(IX+-1),0
	JR	L_87
L_85:
;  342	      zx = (((double)x)*0.0125)-2.0;
	LD	BC,(IX+-3)
	CALL	__stoiu
	LD	BC,HL
	XOR	A,A
	CALL	__ultof
	LD	HL,5033165
	LD	E,60
	CALL	__fmul
	OR	A,A
	SBC	HL,HL
	LD	E,64
	CALL	__fsub
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  343	      zy = (((double)y)*0.0125)-1.5;
	UEXT	HL
	LD	L,(IX+-1)
	LD	A,H
	LD	BC,HL
	CALL	__ultof
	LD	HL,5033165
	LD	E,60
	CALL	__fmul
	LD	HL,12582912
	LD	E,63
	CALL	__fsub
	LD	(IX+-11),BC
	LD	(IX+-8),A
;  344	      if(juliaPixel(zx, zy, Iter, cx, cy) == 1){
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+24)
	PUSH	BC
	LD	C,(IX+-8)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-11)
	PUSH	BC
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	CALL	_juliaPixel
	LD	IY,27
	ADD	IY,SP
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	LD	SP,IY
	JR	NZ,L_83
;  345	        gfx_SetColor(c1);
	LD	C,(IX+18)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  346	      }
;  347	      else{
	JR	L_84
L_83:
;  348	        gfx_SetColor(c2);
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  349	      }
L_84:
;  350	      gfx_FillRectangle(x, y, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,(IX+-3)
	CALL	__stoiu
	PUSH	HL
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  351	      gfx_FillRectangle(316-x, 236-y, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,236
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,(IX+-3)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,316
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,(IX+-1)
	ADD	A,4
	LD	(IX+-1),A
;  352	    }
L_87:
	LD	A,(IX+-1)
	CP	A,240
	JR	C,L_85
;  353	    if(os_GetCSC()){
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_91
;  354	      gfx_End();
	CALL	_gfx_End
;  355	      return 1;
	LD	HL,1
	JR	L_94
;  356	    }
;  357	  }
L_91:
	LD	IY,(IX+-3)
	LEA	HL,IY+4
	LD	(IX+-3),L
	LD	(IX+-2),H
L_92:
	LD.LIS	BC,160
	LD	HL,(IX+-3)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_90
	OR	A,A
;  358	  return 0;
	SBC	HL,HL
;  359	}
L_94:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _render_rough ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_juliaPixel                         IMPORT  -----   function
;zy                                   IX-11      4   variable
;zx                                    IX-7      4   variable
;x                                     IX-3      2   variable
;y                                     IX-1      1   variable
;Iter                                 IX+24      3   parameter
;c2                                   IX+21      1   parameter
;c1                                   IX+18      1   parameter
;cy                                   IX+12      4   parameter
;cx                                    IX+6      4   parameter


; Stack Frame Size: 38 (bytes)
;       Spill Code: 0 (instruction)


;  360	
;  361	int render_full(double cx, double cy, uint8_t c1, uint8_t c2, int Iter){
_render_full:
	LD	HL,-11
	CALL	__frameset
;  362	  //Per pixel render
;  363	  uint16_t x;
;  364	  uint8_t y;
;  365	  //Z value
;  366	  double zx;
;  367	  double zy;
;  368	  for(x = 0; x < xLim; x++){
	LD	(IX+-3),0
	LD	(IX+-2),0
	JR	L_107
L_105:
;  369	    for(y = 0; y < yLim; y++){
	LD	(IX+-1),0
	JR	L_102
L_100:
;  370	      zx = (((double)x)*0.0125)-2.0;
	LD	BC,(IX+-3)
	CALL	__stoiu
	LD	BC,HL
	XOR	A,A
	CALL	__ultof
	LD	HL,5033165
	LD	E,60
	CALL	__fmul
	OR	A,A
	SBC	HL,HL
	LD	E,64
	CALL	__fsub
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  371	      zy = (((double)y)*0.0125)-1.5;
	UEXT	HL
	LD	L,(IX+-1)
	LD	A,H
	LD	BC,HL
	CALL	__ultof
	LD	HL,5033165
	LD	E,60
	CALL	__fmul
	LD	HL,12582912
	LD	E,63
	CALL	__fsub
	LD	(IX+-11),BC
	LD	(IX+-8),A
;  372	      if(juliaPixel(zx, zy, Iter, cx, cy) == 1){
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+24)
	PUSH	BC
	LD	C,(IX+-8)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-11)
	PUSH	BC
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	CALL	_juliaPixel
	LD	IY,27
	ADD	IY,SP
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	LD	SP,IY
	JR	NZ,L_98
;  373	        gfx_SetColor(c1);
	LD	C,(IX+18)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  374	      }
;  375	      else{
	JR	L_99
L_98:
;  376	        gfx_SetColor(c2);
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  377	      }
L_99:
;  378	      gfx_SetPixel(x, y);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	CALL	__stoiu
	PUSH	HL
	CALL	_gfx_SetPixel
	POP	BC
	POP	BC
;  379	      gfx_SetPixel(319-x, 239-y);
	LD	A,239
	SUB	A,(IX+-1)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,319
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	CALL	_gfx_SetPixel
	POP	BC
	POP	BC
	INC	(IX+-1)
;  380	    }
L_102:
	LD	A,(IX+-1)
	CP	A,240
	JR	C,L_100
;  381	    if(os_GetCSC()){
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_106
;  382	      gfx_End();
	CALL	_gfx_End
;  383	      return 1;
	LD	HL,1
	JR	L_109
;  384	    }
;  385	  }
L_106:
	LD	HL,(IX+-3)
	INC	HL
	LD	(IX+-3),L
	LD	(IX+-2),H
L_107:
	LD.LIS	BC,160
	LD	HL,(IX+-3)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_105
	OR	A,A
;  386	  return 0;
	SBC	HL,HL
;  387	}
L_109:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _render_full ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_gfx_SetPixel                       IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_juliaPixel                         IMPORT  -----   function
;zy                                   IX-11      4   variable
;zx                                    IX-7      4   variable
;x                                     IX-3      2   variable
;y                                     IX-1      1   variable
;Iter                                 IX+24      3   parameter
;c2                                   IX+21      1   parameter
;c1                                   IX+18      1   parameter
;cy                                   IX+12      4   parameter
;cx                                    IX+6      4   parameter


; Stack Frame Size: 38 (bytes)
;       Spill Code: 0 (instruction)


;  388	
;  389	void wait(uint16_t ms){
_wait:
	LD	HL,-4
	CALL	__frameset
;  390	  uint16_t i;
;  391	  uint16_t cycles;
;  392	  cycles = ms/10;
	LD	BC,(IX+6)
	CALL	__stoiu
	LD	BC,10
	CALL	__idivs
	LD	(IX+-4),L
	LD	(IX+-3),H
;  393	  for(i = 0; i < cycles; i++){
	LD	(IX+-2),0
	LD	(IX+-1),0
	JR	L_113
L_111:
;  394	    boot_WaitShort();
	CALL	_boot_WaitShort
	LD	HL,(IX+-2)
	INC	HL
	LD	(IX+-2),L
	LD	(IX+-1),H
;  395	  }
L_113:
	LD	BC,(IX+-4)
	LD	HL,(IX+-2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_111
;  396	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _wait ***************************
;Name                         Addr/Register   Size   Type
;_boot_WaitShort                     IMPORT  -----   function
;cycles                                IX-4      2   variable
;i                                     IX-2      2   variable
;ms                                    IX+6      2   parameter


; Stack Frame Size: 13 (bytes)
;       Spill Code: 0 (instruction)


;  397	
;  398	char * reverse(char* s)
;  399	{
_reverse:
	LD	HL,-7
	CALL	__frameset
;  400	  int i, j;
;  401	  char c;
;  402	  i = 0;
	LD	BC,0
	LD	(IX+-3),BC
;  403	  j = strlen(s) - 1;
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strlen
	POP	BC
	DEC	HL
	LD	(IX+-6),HL
;  404	  while (i < j){
	JR	L_117
L_118:
;  405	    c = s[i];
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	LD	(IX+-7),A
;  406	    s[i] = s[j];
	LD	BC,(IX+-6)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+6)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
;  407	    s[j] = c;
	LD	BC,(IX+-6)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(IX+-7)
	LD	(HL),A
;  408	    i++;
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  409	    j--;
	LD	BC,(IX+-6)
	DEC	BC
	LD	(IX+-6),BC
;  410	  }
L_117:
	LD	BC,(IX+-6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_118
;  411	        return s;
	LD	HL,(IX+6)
;  412	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _reverse ***************************
;Name                         Addr/Register   Size   Type
;_strlen                             IMPORT  -----   function
;c                                     IX-7      1   variable
;j                                     IX-6      3   variable
;i                                     IX-3      3   variable
;s                                     IX+6      3   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


;  413	
;  414	// Implementation of itoa()
;  415	char* itoa(int num, char* str, int base)
;  416	{
_itoa:
	LD	HL,-13
	CALL	__frameset
;  417	    int i = 0;
	LD	BC,0
	LD	(IX+-3),BC
;  418	    bool isNegative = false;
	LD	(IX+-4),0
;  419	
;  420	    /* Handle 0 explicitely, otherwise empty string is printed for 0 */
;  421	    if (num == 0)
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_125
;  422	    {
;  423	        str[i++] = '0';
	LD	HL,(IX+9)
	LD	(HL),48
;  424	        str[i] = '\0';
	LD	HL,(IX+9)
	INC	HL
	LD	(HL),0
;  425	        return str;
	LD	HL,(IX+9)
	JR	L_138
;  426	    }
L_125:
;  427	
;  428	    // In standard itoa(), negative numbers are handled only with
;  429	    // base 10. Otherwise numbers are considered unsigned.
;  430	    if (num < 0 && base == 10)
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JP	P,L__82
	JP	PE,L_131
	JR	L__83
L__82:
	JP	PO,L_131
L__83:
	LD	BC,10
	LD	HL,(IX+12)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_131
;  431	    {
;  432	        isNegative = true;
	LD	(IX+-4),1
;  433	        num = -num;
	LD	HL,(IX+6)
	CALL	__ineg
	LD	(IX+6),HL
;  434	    }
;  435	
;  436	    // Process individual digits
;  437	    while (num != 0)
	JR	L_131
L_132:
;  438	    {
;  439	        int rem = num % base;
	LD	HL,(IX+6)
	LD	BC,(IX+12)
	CALL	__irems
	LD	(IX+-7),HL
;  440	        str[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
	LD	BC,HL
	LD	HL,9
	OR	A,A
	SBC	HL,BC
	JP	P,L__84
	JP	PE,L_129
	JR	L__85
L__84:
	JP	PO,L_129
L__85:
	LD	IY,(IX+-7)
	LEA	IY,IY+87
	LD	(IX+-10),IY
	JR	L_130
L_129:
	LD	IY,(IX+-7)
	LEA	IY,IY+48
	LD	(IX+-10),IY
L_130:
	LD	BC,(IX+-3)
	LD	(IX+-13),BC
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	A,(IX+-10)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  441	        num = num/base;
	LD	HL,(IX+6)
	LD	BC,(IX+12)
	CALL	__idivs
	LD	(IX+6),HL
;  442	    }
L_131:
	LD	BC,0
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_132
;  443	
;  444	    // If number is negative, append '-'
;  445	    if (isNegative)
	LD	A,(IX+-4)
	OR	A,A
	JR	Z,L_137
;  446	        str[i++] = '-';
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	(HL),45
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_137:
;  447	
;  448	    str[i] = '\0'; // Append string terminator
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	(HL),0
;  449	
;  450	    // Reverse the string
;  451	    reverse(str);
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_reverse
	POP	BC
;  452	
;  453	    return str;
	LD	HL,(IX+9)
;  454	}
L_138:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _itoa ***************************
;Name                         Addr/Register   Size   Type
;_reverse                            IMPORT  -----   function
;temp126                              IX-13      3   variable
;temp127                              IX-10      3   variable
;rem                                   IX-7      3   variable
;isNegative                            IX-4      1   variable
;i                                     IX-3      3   variable
;base                                 IX+12      3   parameter
;str                                   IX+9      3   parameter
;num                                   IX+6      3   parameter


; Stack Frame Size: 28 (bytes)
;       Spill Code: 0 (instruction)


	XREF _kb_Scan:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_VertLine:ROM
	XREF _gfx_HorizLine:ROM
	XREF _gfx_SetPixel:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _strlen:ROM
	XREF _os_GetCSC:ROM
	XREF _boot_WaitShort:ROM
	XREF __idivs:ROM
	XREF __ineg:ROM
	XREF __irems:ROM
	XREF __fadd:ROM
	XREF __fsub:ROM
	XREF __fmul:ROM
	XREF __fcmp:ROM
	XREF __ftol:ROM
	XREF __ultof:ROM
	XREF __stoiu:ROM
	XREF __frameset:ROM
	XDEF _itoa
	XDEF _reverse
	XDEF _wait
	XDEF _render_full
	XDEF _render_rough
	XDEF _juliaPixel
	XDEF _draw_preview
	XDEF _draw_crosshair
	XDEF _draw_color_preview
	XDEF _draw_iter
	XDEF _draw_menu
	XDEF _menu_keys
	XDEF _start_screen
	XDEF _main
	XDEF _iter_buf
	XDEF _Iter
	XDEF _c2
	XDEF _c1
	XDEF _c2index
	XDEF _c1index
	XDEF _colors
	XDEF _cy
	XDEF _cx
	END
