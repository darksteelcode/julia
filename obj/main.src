; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optspeed -noreduceopt -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\MAIN.C"
	.assume ADL=1
	SEGMENT DATA
_cx:
	DF	0.4
_cy:
	DF	-0.1
_colors:
	DB	224
	DB	227
	DB	231
	DB	3
	DB	16
	DB	80
	DB	240
	DB	255
	DB	0
	DB	47
_c1index:
	DW	0
	DB	0
_c2index:
	DW	1
	DB	0
	SEGMENT BSS
_c1:
	DS	1
_c2:
	DS	1
	SEGMENT DATA
_Iter:
	DW	12
	DB	0
;    1	/*
;    2	 *--------------------------------------
;    3	 * Program Name:
;    4	 * Author:
;    5	 * License:
;    6	 * Description:
;    7	 *--------------------------------------
;    8	*/
;    9	
;   10	/* Keep these headers */
;   11	#include <stdbool.h>
;   12	#include <stddef.h>
;   13	#include <stdint.h>
;   14	#include <tice.h>
;   15	
;   16	/* Standard headers (recommended) */
;   17	#include <math.h>
;   18	#include <stdio.h>
;   19	#include <stdlib.h>
;   20	#include <string.h>
;   21	
;   22	#include <graphx.h>
;   23	#include <keypadc.h>
;   24	
;   25	/* Put your function prototypes here */
;   26	int juliaPixel(float x, float y, int i, float cx, float cy);
;   27	int render_rough(double cx, double cy, uint8_t c1, uint8_t c2, int Iter);
;   28	int render_full(double cx, double cy, uint8_t c1, uint8_t c2, int Iter);
;   29	int start_screen();
;   30	int menu_keys();
;   31	void draw_menu();
;   32	void draw_preview(uint8_t c1, uint8_t c2, int Iter);
;   33	void wait(uint16_t ms);
;   34	/* Put all your globals here */
;   35	
;   36	//C value
;   37	double cx = 0.4;
;   38	double cy = -0.1;
;   39	
;   40	//Colors
;   41	#define NUM_COLORS 10
;   42	uint8_t colors[NUM_COLORS] = {gfx_red, gfx_orange, gfx_yellow, gfx_green, gfx_blue, gfx_purple, gfx_pink, gfx_white, gfx_black, 0x2f};
;   43	
;   44	//Index in colors
;   45	int c1index = 0;
;   46	int c2index = 1;
;   47	
;   48	//Forground and background colors
;   49	uint8_t c1;
;   50	uint8_t c2;
;   51	
;   52	//How far to render
;   53	#define xLim 160
;   54	#define yLim 240
;   55	
;   56	#define ROUGH_ITER 7
;   57	#define PREVIEW_ITER 5
;   58	//Full Rendering Iterations - setable by user
;   59	int Iter = 12;
	SEGMENT CODE
;   60	
;   61	void main(void) {
_main:
;   62	    /* Fill in the body of the main function here */
;   63	    //Init colors
;   64	    c1 = colors[c1index];
	LD	BC,_colors
	LD	HL,(_c1index)
	ADD	HL,BC
	LD	A,(HL)
	LD	(_c1),A
;   65	    c2 = colors[c2index];
;   66	    //Draw the startup screen
;   67	    gfx_Begin(gfx_8bpp);
	LD	BC,39
	PUSH	BC
	LD	HL,(_c2index)
	LD	BC,_colors
	ADD	HL,BC
	LD	A,(HL)
	LD	(_c2),A
	CALL	_gfx_Begin
	POP	BC
;   68	    if(start_screen()){return;};
	CALL	_start_screen
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_9
;   69	    //Do a rough outline
;   70	    if(render_rough(cx, cy, c1, c2, ROUGH_ITER)){return;};
	LD	A,(_c2)
	LD	C,A
	LD	A,(_c1)
	LD	DE,7
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	LD	A,(_cy+3)
	PUSH	BC
	LD	C,A
	PUSH	BC
	LD	A,(_cx+3)
	LD	C,A
	LD	DE,(_cy)
	PUSH	DE
	PUSH	BC
	LD	BC,(_cx)
	PUSH	BC
	CALL	_render_rough
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_9
;   71	    //Full render
;   72	    if(render_full(cx, cy, c2, c1, Iter)){return;};
	LD	A,(_c1)
	LD	C,A
	LD	A,(_c2)
	LD	DE,(_Iter)
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	LD	A,(_cy+3)
	PUSH	BC
	LD	C,A
	PUSH	BC
	LD	A,(_cx+3)
	LD	C,A
	LD	DE,(_cy)
	PUSH	DE
	PUSH	BC
	LD	BC,(_cx)
	PUSH	BC
	CALL	_render_full
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_9
;   73	    //Wait for keypress to exit
;   74	    while (!os_GetCSC());
L_7:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_7
;   75	    gfx_End();
	CALL	_gfx_End
;   76	}
L_9:
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_Iter                               STATIC      3   variable
;_render_full                        IMPORT  -----   function
;_cx                                 STATIC      4   variable
;_cy                                 STATIC      4   variable
;_render_rough                       IMPORT  -----   function
;_start_screen                       IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_c2                                 STATIC      1   variable
;_c2index                            STATIC      3   variable
;_c1                                 STATIC      1   variable
;_c1index                            STATIC      3   variable
;_colors                             STATIC     10   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   77	
;   78	/* Put other functions here */
;   79	
;   80	int start_screen(){
_start_screen:
;   81	  //Draw Menu
;   82	  draw_menu();
	CALL	_draw_menu
;   83	  //Draw Preview in top left
;   84	  draw_preview(c1, c2, PREVIEW_ITER);
	LD	A,(_c2)
	LD	C,A
	LD	A,(_c1)
	LD	DE,5
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_draw_preview
	POP	BC
	POP	BC
	POP	BC
;   85	  //Handle keys - waits for key right now
;   86	  if(menu_keys()){return 1;};
	CALL	_menu_keys
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	Z,L_11
	LD	HL,1
	JR	L_12
L_11:
	OR	A,A
;   87	  return 0;
	SBC	HL,HL
;   88	}
L_12:
	RET	


;**************************** _start_screen ***************************
;Name                         Addr/Register   Size   Type
;_menu_keys                          IMPORT  -----   function
;_c1                                 STATIC      1   variable
;_c2                                 STATIC      1   variable
;_draw_preview                       IMPORT  -----   function
;_draw_menu                          IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   89	
;   90	int menu_keys(){
_menu_keys:
;   91	  while(true){
L_22:
;   92	    kb_Scan();
	CALL	_kb_Scan
;   93	    //Check for enter to start rendering
;   94	    if(kb_Data[6] & kb_Enter){wait(400);return 0;}
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_16
	LD	BC,400
	PUSH	BC
	CALL	_wait
	POP	BC
	OR	A,A
	SBC	HL,HL
	JR	L_24
L_16:
;   95	    //Change colors
;   96	    if(kb_Data[4] & kb_LParen){
	LD	A,(16056344)
	AND	A,16
	JR	Z,L_17
;   97	      c1index++;
	LD	BC,(_c1index)
	INC	BC
	LD	(_c1index),BC
;   98	      c1index %= NUM_COLORS;
	LD	HL,(_c1index)
	LD	BC,10
	CALL	__irems
	LD	(_c1index),HL
;   99	      c1 = colors[c1index];
	LD	BC,_colors
	ADD	HL,BC
	LD	A,(HL)
	LD	(_c1),A
;  100	      draw_preview(c1, c2, PREVIEW_ITER);
	LD	A,(_c2)
	LD	C,A
	LD	A,(_c1)
	LD	DE,5
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_draw_preview
	POP	BC
	POP	BC
	POP	BC
;  101	      continue;
	JR	L_22
;  102	    };
L_17:
;  103	    if(kb_Data[5] & kb_RParen){
	LD	A,(16056346)
	AND	A,16
	JR	Z,L_22
;  104	      c2index++;
	LD	BC,(_c2index)
	INC	BC
	LD	(_c2index),BC
;  105	      c2index %= NUM_COLORS;
	LD	HL,(_c2index)
	LD	BC,10
	CALL	__irems
	LD	(_c2index),HL
;  106	      c2 = colors[c2index];
	LD	BC,_colors
	ADD	HL,BC
	LD	A,(HL)
	LD	(_c2),A
;  107	      draw_preview(c1, c2, PREVIEW_ITER);
	LD	C,A
	LD	A,(_c1)
	LD	DE,5
	PUSH	DE
	LD	B,0
	PUSH	BC
	LD	C,A
	PUSH	BC
	CALL	_draw_preview
	POP	BC
	POP	BC
	POP	BC
	JR	L_22
;  108	    };
;  109	  }
;  110	  return 0;
;  111	}
L_24:
	RET	


;**************************** _menu_keys ***************************
;Name                         Addr/Register   Size   Type
;_c2index                            STATIC      3   variable
;_c2                                 STATIC      1   variable
;_draw_preview                       IMPORT  -----   function
;_c1                                 STATIC      1   variable
;_colors                             STATIC     10   variable
;_c1index                            STATIC      3   variable
;_wait                               IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  112	
;  113	void draw_menu(){
_draw_menu:
;  114	  gfx_FillScreen(gfx_white);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  115	  //Mockup preview square
;  116	  gfx_SetColor(gfx_black);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  117	  gfx_FillRectangle(5, 15, 54, 40);
	LD	BC,40
	PUSH	BC
	LD	BC,54
	PUSH	BC
	LD	BC,15
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  118	  //Preview label
;  119	  gfx_SetTextScale(1,1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  120	  gfx_SetTextFGColor(gfx_black);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  121	  gfx_PrintStringXY("Preview", 5, 5);
	LD	BC,5
	PUSH	BC
	PUSH	BC
	LD	BC,L__11
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  122	  gfx_PrintStringXY("Color 1", 5, 65);
	LD	BC,65
	PUSH	BC
	LD	BC,5
	PUSH	BC
	LD	BC,L__12
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  123	  gfx_PrintStringXY("Color 2", 5, 90);
	LD	BC,90
	PUSH	BC
	LD	BC,5
	PUSH	BC
	LD	BC,L__13
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  124	  //Color preview mockup boxes
;  125	  gfx_SetColor(gfx_black);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  126	  gfx_FillRectangle(5, 75, 54, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,54
	PUSH	BC
	LD	BC,75
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  127	  gfx_FillRectangle(5, 100, 54, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,54
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  128	  //Title
;  129	  gfx_SetTextFGColor(gfx_orange);
	LD	BC,227
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  130	  gfx_SetTextScale(5, 5);
	LD	BC,5
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  131	  gfx_PrintStringXY("Julia", 100, 20);
	LD	BC,20
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,L__14
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  132	  //Description
;  133	  gfx_SetTextFGColor(gfx_green);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  134	  gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  135	  gfx_PrintStringXY("A Julia Set Viewer For the TI-84+CE", 75, 60);
	LD	BC,60
	PUSH	BC
	LD	BC,75
	PUSH	BC
	LD	BC,L__15
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  136	  //Author
;  137	  gfx_SetTextFGColor(gfx_orange);
	LD	BC,227
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  138	  gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  139	  gfx_PrintStringXY("By Edward Wawrzynek", 170, 70);
	LD	BC,70
	PUSH	BC
	LD	BC,170
	PUSH	BC
	LD	BC,L__16
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  140	  //Controls Header
;  141	  gfx_SetTextFGColor(gfx_black);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  142	  gfx_SetTextScale(2,2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  143	  gfx_PrintStringXY("Controls", 120,85);
	LD	BC,85
	PUSH	BC
	LD	BC,120
	PUSH	BC
	LD	BC,L__17
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  144	  //Control Text
;  145	  gfx_SetColor(gfx_black);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  146	  gfx_SetTextScale(1,1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  147	  gfx_PrintStringXY("A Julia set starts with a complex nu-", 67, 105);
	LD	BC,105
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__18
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  148	  gfx_PrintStringXY("mber C, which is represented by the  ", 67, 115);
	LD	BC,115
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__19
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  149	  gfx_PrintStringXY("crosshair in the preview. Use the ar-", 67, 125);
	LD	BC,125
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__20
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  150	  gfx_PrintStringXY("row keys to change it and get differ-", 67, 135);
	LD	BC,135
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__21
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  151	  gfx_PrintStringXY("ent fractals. Use the + and - keys to", 67, 145);
	LD	BC,145
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__22
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  152	  gfx_PrintStringXY("change the number of iterations and ", 67, 155);
	LD	BC,155
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__23
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  153	  gfx_PrintStringXY("detail level. Use the ( and ) keys to", 67, 165);
	LD	BC,165
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__24
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  154	  gfx_PrintStringXY("cycle through the background and f-", 67, 175);
	LD	BC,175
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__25
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  155	  gfx_PrintStringXY("oreground colors, respectively. Pre-", 67, 185);
	LD	BC,185
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__26
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  156	  gfx_PrintStringXY("ss enter to begin rendering, and pr-", 67, 195);
	LD	BC,195
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__27
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  157	  gfx_PrintStringXY("ess any key during rendering to exit.", 67, 205);
	LD	BC,205
	PUSH	BC
	LD	BC,67
	PUSH	BC
	LD	BC,L__28
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  158	
;  159	}
	RET	


;**************************** _draw_menu ***************************
;Name                         Addr/Register   Size   Type
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__11:
	DB	"Preview"
	DB	0
L__12:
	DB	"Color 1"
	DB	0
L__13:
	DB	"Color 2"
	DB	0
L__14:
	DB	"Julia"
	DB	0
L__15:
	DB	"A Julia Set Viewer For the TI-84+CE"
	DB	0
L__16:
	DB	"By Edward Wawrzynek"
	DB	0
L__17:
	DB	"Controls"
	DB	0
L__18:
	DB	"A Julia set starts with a complex nu-"
	DB	0
L__19:
	DB	"mber C, which is represented by the  "
	DB	0
L__20:
	DB	"crosshair in the preview. Use the ar-"
	DB	0
L__21:
	DB	"row keys to change it and get differ-"
	DB	0
L__22:
	DB	"ent fractals. Use the + and - keys to"
	DB	0
L__23:
	DB	"change the number of iterations and "
	DB	0
L__24:
	DB	"detail level. Use the ( and ) keys to"
	DB	0
L__25:
	DB	"cycle through the background and f-"
	DB	0
L__26:
	DB	"oreground colors, respectively. Pre-"
	DB	0
L__27:
	DB	"ss enter to begin rendering, and pr-"
	DB	0
L__28:
	DB	"ess any key during rendering to exit."
	DB	0
	SEGMENT CODE
;  160	
;  161	void draw_preview(uint8_t c1, uint8_t c2, int Iter){
_draw_preview:
	LD	HL,-11
	CALL	__frameset
;  162	  uint16_t x;
;  163	  uint8_t y;
;  164	  double zx;
;  165	  double zy;
;  166	  //Draw Color previews boxes
;  167	  gfx_SetColor(c1);
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  168	  gfx_FillRectangle(5, 75, 54, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,54
	PUSH	BC
	LD	BC,75
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  169	  gfx_SetColor(c2);
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  170	  gfx_FillRectangle(5, 100, 54, 10);
	LD	BC,10
	PUSH	BC
	LD	BC,54
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,5
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  171	
;  172	  //6 x 6 blocks - resolution 54 x 40 pixels
;  173	  for(x = 0; x < 27; x++){
	LD	(IX+-3),0
	LD	(IX+-2),0
	JR	L_36
L_34:
;  174	    for(y = 0; y < 40; y++){
	LD	(IX+-1),0
	JR	L_33
L_31:
;  175	      zx = (((double)x)*0.074)-2.0;
	LD	BC,(IX+-3)
	CALL	__stoiu
	LD	BC,HL
	XOR	A,A
	CALL	__ultof
	LD	HL,9932112
	LD	E,61
	CALL	__fmul
	OR	A,A
	SBC	HL,HL
	LD	E,64
	CALL	__fsub
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  176	      zy = (((double)y)*0.075)-1.5;
	UEXT	HL
	LD	L,(IX+-1)
	LD	A,H
	LD	BC,HL
	CALL	__ultof
	LD	HL,10066330
	LD	E,61
	CALL	__fmul
	LD	HL,12582912
	LD	E,63
	CALL	__fsub
	LD	(IX+-11),BC
	LD	(IX+-8),A
;  177	      if(juliaPixel(zx, zy, Iter, cx, cy) == 1){
	LD	A,(_cy+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	A,(_cx+3)
	LD	C,A
	LD	DE,(_cy)
	PUSH	DE
	PUSH	BC
	LD	BC,(_cx)
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+-8)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-11)
	PUSH	BC
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	CALL	_juliaPixel
	LD	IY,27
	ADD	IY,SP
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	LD	SP,IY
	JR	NZ,L_29
;  178	        gfx_SetColor(c2);
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  179	      }
;  180	      else{
	JR	L_30
L_29:
;  181	        gfx_SetColor(c1);
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  182	      }
L_30:
;  183	      gfx_SetPixel(x+5, y+15);
	LD	A,(IX+-1)
	ADD	A,15
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	CALL	__stoiu
	LD	IY,HL
	LEA	BC,IY+5
	PUSH	BC
	CALL	_gfx_SetPixel
	POP	BC
	POP	BC
;  184	      gfx_SetPixel(58-x, 54-y);
	LD	A,54
	SUB	A,(IX+-1)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,58
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	CALL	_gfx_SetPixel
	POP	BC
	POP	BC
	INC	(IX+-1)
;  185	    }
L_33:
	LD	A,(IX+-1)
	CP	A,40
	JR	C,L_31
	LD	HL,(IX+-3)
	INC	HL
	LD	(IX+-3),L
	LD	(IX+-2),H
;  186	  }
L_36:
	LD.LIS	BC,27
	LD	HL,(IX+-3)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_34
;  187	  //Draw Small crosshair indicating where the c value is
;  188	  //Convert from floating c to real location
;  189	  x = 15;
;  190	  y = 25;
;  191	  //Draw
;  192	  gfx_SetColor(gfx_black);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  193	  gfx_HorizLine(x-3, y, 7);
	LD	BC,7
	PUSH	BC
	LD	BC,25
	PUSH	BC
	LD	BC,12
	PUSH	BC
	CALL	_gfx_HorizLine
	POP	BC
	POP	BC
	POP	BC
;  194	  gfx_VertLine(x,y-3,7);
	LD	BC,7
	PUSH	BC
	LD	BC,22
	PUSH	BC
	LD	BC,15
	PUSH	BC
	CALL	_gfx_VertLine
	POP	BC
	POP	BC
	POP	BC
;  195	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _draw_preview ***************************
;Name                         Addr/Register   Size   Type
;_gfx_VertLine                       IMPORT  -----   function
;_gfx_HorizLine                      IMPORT  -----   function
;_gfx_SetPixel                       IMPORT  -----   function
;_cx                                 STATIC      4   variable
;_cy                                 STATIC      4   variable
;_juliaPixel                         IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;zy                                   IX-11      4   variable
;zx                                    IX-7      4   variable
;x                                     IX-3      2   variable
;y                                     IX-1      1   variable
;Iter                                 IX+12      3   parameter
;c2                                    IX+9      1   parameter
;c1                                    IX+6      1   parameter


; Stack Frame Size: 26 (bytes)
;       Spill Code: 0 (instruction)


;  196	
;  197	int juliaPixel(double x, double y, int i, double cx, double cy){
_juliaPixel:
	LD	HL,-15
	CALL	__frameset
;  198	  int n;
;  199	  double tempX;
;  200	  for(n = 0; n < i; n++){
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_43
L_41:
;  201	    tempX = x;
	LD	BC,(IX+6)
	LD	A,(IX+9)
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  202	    x = (x*x)-(y*y) + cx;
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fmul
	LD	(IX+-10),BC
	LD	(IX+-11),A
	LD	A,(IX+15)
	LD	BC,(IX+12)
	LD	HL,(IX+12)
	LD	E,(IX+15)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-10)
	LD	A,(IX+-11)
	CALL	__fsub
	LD	HL,(IX+21)
	LD	E,(IX+24)
	CALL	__fadd
	LD	(IX+6),BC
	LD	(IX+9),A
;  203	    y = (2.0*tempX*y) + cy;
	LD	BC,(IX+-7)
	LD	A,(IX+-4)
	OR	A,A
	SBC	HL,HL
	LD	E,64
	CALL	__fmul
	LD	HL,(IX+12)
	LD	E,(IX+15)
	CALL	__fmul
	LD	HL,(IX+27)
	LD	E,(IX+30)
	CALL	__fadd
	LD	(IX+12),BC
	LD	(IX+15),A
;  204	    if((x*x) + (y*y) > 2.0){
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fmul
	LD	(IX+-14),BC
	LD	(IX+-15),A
	LD	A,(IX+15)
	LD	BC,(IX+12)
	LD	HL,(IX+12)
	LD	E,(IX+15)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-14)
	LD	A,(IX+-15)
	CALL	__fadd
	OR	A,A
	SBC	HL,HL
	LD	E,64
	CALL	__fcmp
	JP	P,L_42
	OR	A,A
;  205	      return 0;
	SBC	HL,HL
	JR	L_45
;  206	    }
;  207	  }
L_42:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_43:
	LD	BC,(IX+18)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_41
;  208	  return 1;
	LD	HL,1
;  209	}
L_45:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _juliaPixel ***************************
;Name                         Addr/Register   Size   Type
;tempX                                 IX-7      4   variable
;n                                     IX-3      3   variable
;cy                                   IX+27      4   parameter
;cx                                   IX+21      4   parameter
;i                                    IX+18      3   parameter
;y                                    IX+12      4   parameter
;x                                     IX+6      4   parameter


; Stack Frame Size: 48 (bytes)
;       Spill Code: 0 (instruction)


;  210	
;  211	int render_rough(double cx, double cy, uint8_t c1, uint8_t c2, int Iter){
_render_rough:
	LD	HL,-11
	CALL	__frameset
;  212	  //4 x 4 blocks
;  213	  uint16_t x;
;  214	  uint8_t y;
;  215	  //Z value
;  216	  double zx;
;  217	  double zy;
;  218	  for(x = 0; x < xLim; x+=4){
	LD	(IX+-3),0
	LD	(IX+-2),0
	JR	L_56
L_54:
;  219	    for(y = 0; y < yLim; y+=4){
	LD	(IX+-1),0
	JR	L_51
L_49:
;  220	      zx = (((double)x)*0.0125)-2.0;
	LD	BC,(IX+-3)
	CALL	__stoiu
	LD	BC,HL
	XOR	A,A
	CALL	__ultof
	LD	HL,5033165
	LD	E,60
	CALL	__fmul
	OR	A,A
	SBC	HL,HL
	LD	E,64
	CALL	__fsub
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  221	      zy = (((double)y)*0.0125)-1.5;
	UEXT	HL
	LD	L,(IX+-1)
	LD	A,H
	LD	BC,HL
	CALL	__ultof
	LD	HL,5033165
	LD	E,60
	CALL	__fmul
	LD	HL,12582912
	LD	E,63
	CALL	__fsub
	LD	(IX+-11),BC
	LD	(IX+-8),A
;  222	      if(juliaPixel(zx, zy, Iter, cx, cy) == 1){
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+24)
	PUSH	BC
	LD	C,(IX+-8)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-11)
	PUSH	BC
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	CALL	_juliaPixel
	LD	IY,27
	ADD	IY,SP
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	LD	SP,IY
	JR	NZ,L_47
;  223	        gfx_SetColor(c1);
	LD	C,(IX+18)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  224	      }
;  225	      else{
	JR	L_48
L_47:
;  226	        gfx_SetColor(c2);
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  227	      }
L_48:
;  228	      gfx_FillRectangle(x, y, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,(IX+-3)
	CALL	__stoiu
	PUSH	HL
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  229	      gfx_FillRectangle(316-x, 236-y, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,236
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,(IX+-3)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,316
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	A,(IX+-1)
	ADD	A,4
	LD	(IX+-1),A
;  230	    }
L_51:
	LD	A,(IX+-1)
	CP	A,240
	JR	C,L_49
;  231	    if(os_GetCSC()){
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_55
;  232	      gfx_End();
	CALL	_gfx_End
;  233	      return 1;
	LD	HL,1
	JR	L_58
;  234	    }
;  235	  }
L_55:
	LD	IY,(IX+-3)
	LEA	HL,IY+4
	LD	(IX+-3),L
	LD	(IX+-2),H
L_56:
	LD.LIS	BC,160
	LD	HL,(IX+-3)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_54
	OR	A,A
;  236	  return 0;
	SBC	HL,HL
;  237	}
L_58:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _render_rough ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_juliaPixel                         IMPORT  -----   function
;zy                                   IX-11      4   variable
;zx                                    IX-7      4   variable
;x                                     IX-3      2   variable
;y                                     IX-1      1   variable
;Iter                                 IX+24      3   parameter
;c2                                   IX+21      1   parameter
;c1                                   IX+18      1   parameter
;cy                                   IX+12      4   parameter
;cx                                    IX+6      4   parameter


; Stack Frame Size: 38 (bytes)
;       Spill Code: 0 (instruction)


;  238	
;  239	int render_full(double cx, double cy, uint8_t c1, uint8_t c2, int Iter){
_render_full:
	LD	HL,-11
	CALL	__frameset
;  240	  //Per pixel render
;  241	  uint16_t x;
;  242	  uint8_t y;
;  243	  //Z value
;  244	  double zx;
;  245	  double zy;
;  246	  for(x = 0; x < xLim; x++){
	LD	(IX+-3),0
	LD	(IX+-2),0
	JR	L_71
L_69:
;  247	    for(y = 0; y < yLim; y++){
	LD	(IX+-1),0
	JR	L_66
L_64:
;  248	      zx = (((double)x)*0.0125)-2.0;
	LD	BC,(IX+-3)
	CALL	__stoiu
	LD	BC,HL
	XOR	A,A
	CALL	__ultof
	LD	HL,5033165
	LD	E,60
	CALL	__fmul
	OR	A,A
	SBC	HL,HL
	LD	E,64
	CALL	__fsub
	LD	(IX+-7),BC
	LD	(IX+-4),A
;  249	      zy = (((double)y)*0.0125)-1.5;
	UEXT	HL
	LD	L,(IX+-1)
	LD	A,H
	LD	BC,HL
	CALL	__ultof
	LD	HL,5033165
	LD	E,60
	CALL	__fmul
	LD	HL,12582912
	LD	E,63
	CALL	__fsub
	LD	(IX+-11),BC
	LD	(IX+-8),A
;  250	      if(juliaPixel(zx, zy, Iter, cx, cy) == 1){
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+24)
	PUSH	BC
	LD	C,(IX+-8)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-11)
	PUSH	BC
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	CALL	_juliaPixel
	LD	IY,27
	ADD	IY,SP
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	LD	SP,IY
	JR	NZ,L_62
;  251	        gfx_SetColor(c1);
	LD	C,(IX+18)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  252	      }
;  253	      else{
	JR	L_63
L_62:
;  254	        gfx_SetColor(c2);
	LD	C,(IX+21)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  255	      }
L_63:
;  256	      gfx_SetPixel(x, y);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	CALL	__stoiu
	PUSH	HL
	CALL	_gfx_SetPixel
	POP	BC
	POP	BC
;  257	      gfx_SetPixel(319-x, 239-y);
	LD	A,239
	SUB	A,(IX+-1)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	CALL	__stoiu
	LD	BC,HL
	LD	HL,319
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	CALL	_gfx_SetPixel
	POP	BC
	POP	BC
	INC	(IX+-1)
;  258	    }
L_66:
	LD	A,(IX+-1)
	CP	A,240
	JR	C,L_64
;  259	    if(os_GetCSC()){
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_70
;  260	      gfx_End();
	CALL	_gfx_End
;  261	      return 1;
	LD	HL,1
	JR	L_73
;  262	    }
;  263	  }
L_70:
	LD	HL,(IX+-3)
	INC	HL
	LD	(IX+-3),L
	LD	(IX+-2),H
L_71:
	LD.LIS	BC,160
	LD	HL,(IX+-3)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_69
	OR	A,A
;  264	  return 0;
	SBC	HL,HL
;  265	}
L_73:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _render_full ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_gfx_SetPixel                       IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_juliaPixel                         IMPORT  -----   function
;zy                                   IX-11      4   variable
;zx                                    IX-7      4   variable
;x                                     IX-3      2   variable
;y                                     IX-1      1   variable
;Iter                                 IX+24      3   parameter
;c2                                   IX+21      1   parameter
;c1                                   IX+18      1   parameter
;cy                                   IX+12      4   parameter
;cx                                    IX+6      4   parameter


; Stack Frame Size: 38 (bytes)
;       Spill Code: 0 (instruction)


;  266	
;  267	void wait(uint16_t ms){
_wait:
	LD	HL,-4
	CALL	__frameset
;  268	  uint16_t i;
;  269	  uint16_t cycles;
;  270	  cycles = ms/10;
	LD	BC,(IX+6)
	CALL	__stoiu
	LD	BC,10
	CALL	__idivs
	LD	(IX+-4),L
	LD	(IX+-3),H
;  271	  for(i = 0; i < cycles; i++){
	LD	(IX+-2),0
	LD	(IX+-1),0
	JR	L_77
L_75:
;  272	    boot_WaitShort();
	CALL	_boot_WaitShort
	LD	HL,(IX+-2)
	INC	HL
	LD	(IX+-2),L
	LD	(IX+-1),H
;  273	  }
L_77:
	LD	BC,(IX+-4)
	LD	HL,(IX+-2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_75
;  274	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _wait ***************************
;Name                         Addr/Register   Size   Type
;_boot_WaitShort                     IMPORT  -----   function
;cycles                                IX-4      2   variable
;i                                     IX-2      2   variable
;ms                                    IX+6      2   parameter


; Stack Frame Size: 13 (bytes)
;       Spill Code: 0 (instruction)


	XREF _kb_Scan:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_VertLine:ROM
	XREF _gfx_HorizLine:ROM
	XREF _gfx_SetPixel:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _os_GetCSC:ROM
	XREF _boot_WaitShort:ROM
	XREF __idivs:ROM
	XREF __irems:ROM
	XREF __fadd:ROM
	XREF __fsub:ROM
	XREF __fmul:ROM
	XREF __fcmp:ROM
	XREF __ultof:ROM
	XREF __stoiu:ROM
	XREF __frameset:ROM
	XDEF _wait
	XDEF _render_full
	XDEF _render_rough
	XDEF _juliaPixel
	XDEF _draw_preview
	XDEF _draw_menu
	XDEF _menu_keys
	XDEF _start_screen
	XDEF _main
	XDEF _Iter
	XDEF _c2
	XDEF _c1
	XDEF _c2index
	XDEF _c1index
	XDEF _colors
	XDEF _cy
	XDEF _cx
	END
